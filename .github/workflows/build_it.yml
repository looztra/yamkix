---
name: "Build"
on:
  push:
    branches:
      - main
      - maintenance/*
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
      - maintenance/*
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - "**.png"
      - "**.gif"
      - "**.svg"
      - "**.jpeg"
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-checks
  cancel-in-progress: true

env:
  PIP_CONFIG_FILE: /dev/null

jobs:
  root_checks:
    name: Root checks
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Install Tools with asdf
        uses: asdf-vm/actions/install@v1.1.0

      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0

      # We only check docs for now
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            can_apply:
              - '**/*.md'

      - name: Lint Docs
        if: steps.filter.outputs.can_apply == 'true'
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_MARKDOWN: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MARKDOWN_CONFIG_FILE: .markdownlint.yaml
          LINTER_RULES_PATH: "."

      - name: Check requirements.txt is up to date with poetry.lock
        run: |
          make update-requirements-file
          changes_count=$(git status --porcelain --untracked-files requirements.txt | wc -l)
          if [[ "$changes_count" -ne 0 ]] ; then
            echo "You failed to keep requirements.txt synchronized with poetry.lock"
            git status --porcelain --untracked-files requirements.txt
            git diff requirements.txt
            exit 1
          else
            echo "Nothing to say, requirements.txt seems OK"
          fi

  build-python:
    name: Build python artifacts
    runs-on: ubuntu-latest
    needs: root_checks
    timeout-minutes: 20
    strategy:
      matrix:
        python_version:
          - 3.8
          - 3.9
          - "3.10"
          - 3.11
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Get poetry version from .tool-versions
        id: get-poetry-version
        run: |
          echo "POETRY_VERSION=$(grep poetry .tool-versions | cut -d " " -f2)" >> "${GITHUB_OUTPUT}"

      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ steps.get-poetry-version.outputs.POETRY_VERSION }}

      - name: Prepare venv
        run: |
          poetry install

      - name: Run linters
        run: |
          echo "Activate venv"
          eval "$(make echo-venv-activate-cmd)"
          echo "Run linters"
          make lint

      - name: Run unit tests
        run: |
          echo "Activate venv"
          eval "$(make echo-venv-activate-cmd)"
          echo "Run unit tests"
          make unit-tests

      - name: Setup BATS
        uses: mig4/setup-bats@v1.2.0
        with:
          bats-version: 1.5.0

      - name: Run integration tests
        run: |
          echo "Activate venv"
          source .venv/bin/activate
          echo "Run integration tests"
          make integration-tests

      - name: Check that we can build a package
        run: |
          echo "Activate venv"
          # source .venv/bin/activate
          # echo "Check that we can build a package"
          # echo -n "${{ secrets.PYPIRC_B64 }}" | base64 --decode > ~/.pypirc
          # make clean dist dist-check
          # rm ~/.pypirc

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-python
    timeout-minutes: 20
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Do we need to release?
        run: |
          NEED_RELEASE=
          if [[ "$GITHUB_REF_SLUG" == v* ]]; then
            NEED_RELEASE=yes
          fi
          echo "NEED_RELEASE=${NEED_RELEASE}" >> "${GITHUB_ENV}"

      - name: Setup Python
        if: "${{ env.NEED_RELEASE == 'yes' }}"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Publish python artifact
        if: "${{ env.NEED_RELEASE == 'yes' }}"
        run: |
          echo "Cleaning previous venv if any"
          rm -rf .venv || true
          echo "Create a new venv"
          python3 -m venv .venv
          echo "Activate venv"
          source .venv/bin/activate
          which python
          echo "Upgrade pip"
          pip install --upgrade pip
          echo "Install ci requirements"
          pip install -r requirements.txt
          echo "Publish artifacts"
          echo -n "${{ secrets.PYPIRC_B64 }}" | base64 --decode > ~/.pypirc
          make clean dist dist-check dist-upload
          rm ~/.pypirc

      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: "${{ env.NEED_RELEASE == 'yes' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker build
        if: "${{ env.NEED_RELEASE == 'yes' }}"
        run: |
          make docker-build
          echo "Checking built image"
          docker image ls

      - name: Push docker images
        if: "${{ env.NEED_RELEASE == 'yes' }}"
        run: |
          make docker-push docker-push-latest
