{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yamkix","text":""},{"location":"#why","title":"Why?","text":"<ul> <li>Because I like my <code>yaml</code> file to be nicely formatted and there is not out of the box default format rules.</li> <li>Because   https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml   does not add explicit start of documents and I don't like it this   way</li> <li>Because I'm not a <code>js</code> / <code>typescript</code> dev so I don't want to go into a   VSCode extension with client and server language</li> </ul>"},{"location":"#what","title":"What?","text":"<pre><code>&gt; ./yamkix -h\n Usage: yamkix [OPTIONS]\n\n Format yaml input file.\n\n Yamkix formats YAML files with opinionated styling rules. By default, explicit_start is 'On', explicit_end is 'Off' and array elements are pushed inwards the start of the matching\n sequence. Comments are preserved thanks to default parsing mode 'rt'.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --input                  -i      TEXT     the file to parse or 'STDIN'. Defaults to 'STDIN' if not specified [default: None]                                                        \u2502\n\u2502 --output                 -o      TEXT     the name of the file to generate (can be 'STDOUT') (same as input file if not specified, hence 'STDOUT' if 'STDIN' as input)              \u2502\n\u2502                                           [default: None]                                                                                                                           \u2502\n\u2502 --stdout                 -s               output is STDOUT whatever the value for input (-i) and output (-o)                                                                        \u2502\n\u2502 --typ                    -t      TEXT     the yaml parser mode. Can be 'safe' or 'rt' [default: rt]                                                                                 \u2502\n\u2502 --no-explicit-start      -n               by default, explicit start of the yaml doc is 'On', you can disable it with this option                                                   \u2502\n\u2502 --explicit-end           -e               by default, explicit end of the yaml doc is 'Off', you can enable it with this option                                                     \u2502\n\u2502 --no-quotes-preserved    -q               by default, quotes are preserved you can disable this with this option                                                                    \u2502\n\u2502 --default-flow-style     -f               enable the default flow style 'Off' by default. In default flow style (with typ='rt'), maps and lists are written like json               \u2502\n\u2502 --no-dash-inwards        -d               by default, dash are pushed inwards use '--no-dash-inwards' to have the dash start at the sequence level                                  \u2502\n\u2502 --spaces-before-comment  -c      INTEGER  specify the number of spaces between comments and content. If not specified, comments are left as is. [default: None]                     \u2502\n\u2502 --version                -v               show yamkix version                                                                                                                       \u2502\n\u2502 --silent                 -S               silent mode, don't print config when processing file(s)                                                                                   \u2502\n\u2502 --help                   -h               Show this message and exit.                                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>In order to better understand what you can do with the configuration provided, have a look at the dedicated Configuration page.</p>"},{"location":"#where-does-the-name-yamkix-come-from","title":"Where does the name 'yamkix' come from?","text":"<ul> <li>Thanks to   http://online-generator.com/name-generator/product-name-generator.php   that suggested me <code>zamkix</code>. Just switched the starting <code>z</code> for the   <code>y</code> of <code>yaml</code></li> </ul>"},{"location":"#vscode-task","title":"VSCode Task","text":"<ul> <li> <p>Install the package with <code>uv tool install yamkix</code> (or <code>pip install --user yamkix</code> if you are not using uv)</p> </li> <li> <p>Sample vscode task :</p> </li> </ul> <pre><code>{\n  \"label\": \"format yaml with yamkix\",\n  \"type\": \"shell\",\n  \"command\": \"yamkix --input ${file}\",\n  \"group\": \"build\",\n  \"presentation\": {\n    \"reveal\": \"always\",\n    \"panel\": \"shared\"\n  },\n  \"problemMatcher\": []\n}\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#0111-2025-08-13","title":"0.11.1 (2025-08-13)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>docs: use the correct path to changelog url in README.md that is also pushed to PyPi (#251) (06d88a5)</li> </ul>"},{"location":"changelog/#0110-2025-08-13","title":"0.11.0 (2025-08-13)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>api: clarify API by exporting an explicit list of features in the root init module (e4ad750)</li> <li>ci: make Release Please generated CHANGELOG in mkdocs folder (#245) (7b4c143)</li> <li>refactor: switch from argparse to Typer (e4ad750)</li> <li>silent-mode: provide a silent mode that doesn't print config when processing file(s) (e4ad750)</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>ci: adjust conditions for github artifact upload (#241) (ec32bae)</li> <li>ci: deploy pre-release when on a Release Please PR (#240) (2bfc4b2)</li> <li>correctly pass APP_VERSION (#136) (6cabac5)</li> <li>lint: make ruff and pyright run without errors (#147) (b878120)</li> <li>update ec config (#137) (bbfe2ea)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>mkdocs: add search bar, tune theme and display (#243) (5a9405a)</li> <li>mkdocs: init docs managed by mkdocs (e4ad750)</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>config: use dataclasses for a better config management (#156) (9e12d3d)</li> </ul>"},{"location":"changelog/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>checks: use a single finalizer required check (#248) (0229d1f)</li> <li>lint pr title: setup lint pr title workflow (#145) (f26738e)</li> <li>publish: push to testpypi on Release Please pr and not on push to main (e4ad750)</li> <li>release: setup release please workflow (#159) (c215e34)</li> <li>release: upload artifact if we need to release (#141) (1ea5257)</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Explicit start of yaml docs by default (you can disable it with   <code>--no-explicit-start</code>)</li> <li>Quotes preserved by default (you can disable it with   <code>--no-quotes-preserved</code>)</li> <li>Arrays elements pushed inwards by default (you can disable it with   <code>--no-dash-inwards</code>)</li> <li>Output file is input file by default</li> <li>Comments preserved by default thanks to   ruamel.yaml <code>round_trip</code>   mode (you can disable it with <code>--typ safe</code>)</li> </ul>"},{"location":"configuration/#to-preserve-or-not-to-preserve-quotes","title":"To preserve or not to preserve quotes?","text":"<ul> <li>Quotes preserved means : if there were quotes in the input, they   will also be present in the output, and it will be the same type   (single/double) of quotes</li> <li>Quotes not preserved means :</li> <li>if quotes are not necessary (around pure strings), they will     be removed</li> <li>if quotes are present around booleans and numbers, they will be     converted to default (single quotes)</li> <li>if quotes are not present around booleans and numbers, there     will be no quotes in the output too</li> </ul> <p>Note: there is no option for the moment to force the usage of double quotes when <code>-q</code> or <code>--no-quotes-preserved</code> is used.</p> <p>Note</p> <p>If you are wondering if you should use quotes or not when writing yaml code, you can read this awesome Stack Overflow thread.</p> <p>Quoting the TLDR; section here:</p> <p>With that being said, according to the official YAML specification one should:</p> <ul> <li>Whenever applicable use the unquoted style since it is the most readable.</li> <li>Use the single-quoted style (') if characters such as \" and \\ are being used inside the string to avoid escaping them and therefore improve readability.</li> <li>Use the double-quoted style (\") when the first two options aren't sufficient, i.e. in scenarios where more complex line breaks are required or non-printable characters are needed.</li> </ul>"},{"location":"configuration/#quotes-preserved-default-behavior","title":"Quotes preserved (default behavior)","text":"<p>With input :</p> <pre><code>``` yaml\n---\napiVersion: extensions/v1beta1 # with comment\nkind: ReplicaSet\nmetadata:\n  name: tname\n  namespace: tns\n  annotations:\n    string_no_quotes: frontend\n    string_single_quotes: 'frontend'\n    string_double_quotes: \"frontend\"\n    boolean_no_quotes: true\n    boolean_single_quotes: 'true'\n    boolean_double_quotes: \"true\"\n    number_no_quotes: 1\n    number_single_quotes: '1'\n    number_double_quotes: \"1\"\n```\n</code></pre> <p>the output will be the same as the input :</p> <pre><code>``` yaml\n---\napiVersion: extensions/v1beta1 # with comment\nkind: ReplicaSet\nmetadata:\n  name: tname\n  namespace: tns\n  annotations:\n    string_no_quotes: frontend\n    string_single_quotes: 'frontend'\n    string_double_quotes: \"frontend\"\n    boolean_no_quotes: true\n    boolean_single_quotes: 'true'\n    boolean_double_quotes: \"true\"\n    number_no_quotes: 1\n    number_single_quotes: '1'\n    number_double_quotes: \"1\"\n```\n</code></pre>"},{"location":"configuration/#quotes-not-preserved-using-q-no-quotes-preserved","title":"Quotes not preserved (using -q/--no-quotes-preserved)","text":"<p>With input :</p> <pre><code>``` yaml\n---\napiVersion: extensions/v1beta1 # with comment\nkind: ReplicaSet\nmetadata:\n  name: tname\n  namespace: tns\n  annotations:\n    string_no_quotes: frontend\n    string_single_quotes: 'frontend'\n    string_double_quotes: \"frontend\"\n    boolean_no_quotes: true\n    boolean_single_quotes: 'true'\n    boolean_double_quotes: \"true\"\n    number_no_quotes: 1\n    number_single_quotes: '1'\n    number_double_quotes: \"1\"\n```\n</code></pre> <p>the output will be :</p> <pre><code>``` yaml\n---\napiVersion: extensions/v1beta1 # with comment\nkind: ReplicaSet\nmetadata:\n  name: tname\n  namespace: tns\n  annotations:\n    string_no_quotes: frontend\n    string_single_quotes: frontend\n    string_double_quotes: frontend\n    boolean_no_quotes: true\n    boolean_single_quotes: 'true'\n    boolean_double_quotes: 'true'\n    number_no_quotes: 1\n    number_single_quotes: '1'\n    number_double_quotes: '1'\n```\n</code></pre> <p>Note : <code>kubesplit</code> is not fully Kubernetes aware for the moment, so it does not try to enforce this behaviour only on string sensible kubernetes resource fields (<code>.metadata.annotations</code> and <code>.spec.containers.environment</code> values)</p>"},{"location":"contributing/","title":"How to contribute","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":""},{"location":"contributing/#mandatory","title":"Mandatory","text":"<ul> <li>uv</li> </ul>"},{"location":"contributing/#optional","title":"Optional","text":"<ul> <li>mise</li> <li>Pre-Commit</li> <li>shfmt</li> <li>shellcheck</li> <li>editorconfig-checker</li> </ul>"},{"location":"contributing/#install-the-optional-prerequisites","title":"Install the optional prerequisites","text":"<ul> <li>If you installed mise, you can simply run:</li> </ul> <pre><code>mise install\n</code></pre>"},{"location":"contributing/#hack","title":"Hack","text":"<ul> <li>run <code>make setup-venv</code> so that <code>uv</code> inits a virtual environment with required dependencies (same as <code>uv sync</code>)</li> </ul>"},{"location":"contributing/#update-the-dependencies","title":"Update the dependencies","text":"<p>Run <code>make upgrade-dependencies</code>, this is the same as <code>uv sync --upgrade</code></p>"},{"location":"contributing/#code","title":"Code","text":"<ul> <li>run <code>make tests</code> to launch unit tests (same as `uv run poe test:cov)</li> <li>run <code>make lint</code> to launch linters (same as <code>uv run poe lint:all</code>)</li> </ul>"},{"location":"contributing/#pre-commit","title":"Pre-Commit","text":"<ul> <li>If you want to run pre-commit before each commit, run once <code>make precommit-install</code></li> <li>If you don't want to configure a pre-commit hook (your choice, pre-commit is run by the CICD anyway), you can run it when you want, use <code>make precommit-run</code></li> </ul>"},{"location":"contributing/#configure-your-editor","title":"Configure your editor","text":""},{"location":"contributing/#vscode","title":"VSCode","text":"<ul> <li>It's a good idea to install the EditorConfig for VSCode extension</li> <li>Your <code>settings.json</code> (user or workspace or project) should contain:</li> </ul> <pre><code>{\n  \"[python]\": {\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n      \"source.organizeImports\": \"explicit\",\n      \"source.fixAll\": \"explicit\"\n    }\n  }\n  \"files.trimTrailingWhitespace\": true,\n  \"files.insertFinalNewline\": true,\n  \"files.trimFinalNewlines\": true,\n  \"python.testing.unittestEnabled\": false,\n  \"python.testing.pytestEnabled\": true,\n}\n</code></pre>"},{"location":"contributing/#others","title":"Others","text":"<ul> <li>Feel free to contribute any other editor configuration</li> </ul>"},{"location":"install/","title":"Install instructions","text":""},{"location":"install/#install-yamkix","title":"Install <code>Yamkix</code>","text":"<ul> <li><code>Yamkix</code> is published on pypi.org</li> <li>You can make it available in your path with uv (for instance):</li> </ul> <pre><code>uv tool install yamkix\n</code></pre>"},{"location":"install/#installing-yamkix-with-mise","title":"Installing <code>Yamkix</code> with <code>mise</code>","text":"<ul> <li>mise is an awesome tool that can install softwares in different versions (compared to <code>brew</code>)</li> <li><code>mise</code> provides a pipx backend ... that can rely on <code>uv</code> if available</li> </ul> Sample mise.toml<pre><code>[tools]\n\"pipx:pre-commit\" = { version = \"4.3.0\", uvx_args = \"--with pre-commit-uv\" }\n\"pipx:yamkix\" = \"0.10.0\"\nshellcheck = \"0.11.0\"\nshfmt = \"3.12.0\"\nuv = \"0.8.9\"\n</code></pre>"},{"location":"pointers/","title":"Pointers","text":""},{"location":"pointers/#ruamelyaml","title":"ruamel.yaml","text":"<p><code>Yamkix</code> relies on the awesome ruamel.yaml package.</p>"},{"location":"pointers/#kubesplit","title":"kubesplit","text":"<ul> <li>kubesplit (from the same author as <code>yamkix</code>) uses <code>yamkix</code> under the hood to format the yaml descriptors that it generates.</li> <li>We try to make sure <code>kubesplit</code> compatible with <code>yamkix</code>. Please create issues in either yamkix github repo or kubesplit github repo if you think we broke something.</li> </ul>"},{"location":"pointers/#using-yamkix-api","title":"Using <code>yamkix</code> API","text":"<ul> <li>In the future, we will try to not generate breaking changes in the functions and classes that we consider <code>public</code>, i.e. the ones declared in the <code>yamkix</code> root init.py.</li> <li>if you think we did break the API contract, please raise an issue.</li> <li>if you are using something else that what is declared in the root package, please get in touch so that we know about it and see what we can do for you.</li> </ul>"},{"location":"reference/","title":"Yamkix API reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>yamkix</code> project code.</p>"},{"location":"reference/#api-overview","title":"API Overview","text":"<p>Top-level package for yamkix.</p>"},{"location":"reference/#yamkix.YamkixConfig","title":"YamkixConfig  <code>dataclass</code>","text":"<p>Defines the available <code>Yamkix</code> configuration.</p> <p>Attributes:</p> Name Type Description <code>explicit_start</code> <code>bool</code> <p>Whether to include explicit start markers (<code>---</code>).</p> <code>explicit_end</code> <code>bool</code> <p>Whether to include explicit end markers (<code>...</code>).</p> <code>default_flow_style</code> <code>bool</code> <p>Whether to use default flow style. Setting <code>default_flow_style = False</code> ensures that all collections are dumped in block style by default, which is the typical YAML format where sequences and mappings are presented with indentation and newlines. Conversely, setting <code>default_flow_style = True</code> forces all collections to be dumped in flow style, meaning they are written on a single line using square brackets <code>[]</code> for sequences and curly braces <code>{}</code> for mappings.</p> <code>dash_inwards</code> <code>bool</code> <p>Whether to use dash inwards, i.e. whether to indent the dash in front of a sequence.</p> <code>quotes_preserved</code> <code>bool</code> <p>Whether to preserve quotes, i.e. preserve the original quotes used in the input in the output.</p> <code>spaces_before_comment</code> <code>int | None</code> <p>Number of spaces before comments.</p> <code>line_width</code> <code>int</code> <p>Maximum line width.</p> <code>version</code> <code>bool | None</code> <p>Whether to include version information (deprecated)</p> <code>io_config</code> <code>YamkixInputOutputConfig</code> <p>Input/Output configuration.</p> Source code in <code>src/yamkix/config.py</code> <pre><code>@dataclass\nclass YamkixConfig:  # pylint: disable=too-many-instance-attributes\n    \"\"\"Defines the available `Yamkix` configuration.\n\n    Attributes:\n        explicit_start: Whether to include explicit start markers (`---`).\n        explicit_end: Whether to include explicit end markers (`...`).\n        default_flow_style: Whether to use default flow style. Setting `default_flow_style = False` ensures\n            that all collections are dumped in block style by default, which is the typical YAML format where sequences\n            and mappings are presented with indentation and newlines. Conversely, setting `default_flow_style = True`\n            forces all collections to be dumped in flow style, meaning they are written on\n            a single line using square brackets `[]` for sequences and curly braces `{}` for mappings.\n        dash_inwards: Whether to use dash inwards, i.e. whether to indent the dash in front of a sequence.\n        quotes_preserved: Whether to preserve quotes, i.e. preserve the original quotes\n            used in the input in the output.\n        spaces_before_comment: Number of spaces before comments.\n        line_width: Maximum line width.\n        version: Whether to include version information (deprecated)\n        io_config: Input/Output configuration.\n\n    \"\"\"\n\n    explicit_start: bool\n    explicit_end: bool\n    default_flow_style: bool\n    dash_inwards: bool\n    quotes_preserved: bool\n    parsing_mode: str\n    spaces_before_comment: int | None\n    line_width: int\n    version: bool | None\n    io_config: YamkixInputOutputConfig\n</code></pre>"},{"location":"reference/#yamkix.YamkixInputOutputConfig","title":"YamkixInputOutputConfig  <code>dataclass</code>","text":"<p><code>Yamkix</code> input/output configuration.</p> <p>Part of the config that manages <code>input</code> and <code>output</code>.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>str | None</code> <p>The input file to parse or <code>STDIN</code> or <code>None</code>. Defaults to <code>STDIN</code> if not specified</p> <code>output</code> <code>str | None</code> <p>The name of the file to generate (can be <code>STDOUT</code>). Will be the same as input file if not specified (<code>None</code>), or <code>STDOUT</code> if <code>STDIN</code> was specified as input</p> Source code in <code>src/yamkix/config.py</code> <pre><code>@dataclass\nclass YamkixInputOutputConfig:\n    \"\"\"`Yamkix` input/output configuration.\n\n    Part of the config that manages `input` and `output`.\n\n    Attributes:\n        input: The input file to parse or `STDIN` or `None`. Defaults to `STDIN` if not specified\n        output: The name of the file to generate (can be `STDOUT`). Will be the same as input file\n            if not specified (`None`), or `STDOUT` if `STDIN` was specified as input\n    \"\"\"\n\n    input: str | None\n    output: str | None\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Set display names for `input` and `output`.\"\"\"\n        self.input_display_name = STDIN_DISPLAY_NAME if self.input is None else self.input\n        self.output_display_name = STDOUT_DISPLAY_NAME if self.output is None else self.output\n</code></pre>"},{"location":"reference/#yamkix.YamkixInputOutputConfig.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre> <p>Set display names for <code>input</code> and <code>output</code>.</p> Source code in <code>src/yamkix/config.py</code> <pre><code>def __post_init__(self) -&gt; None:\n    \"\"\"Set display names for `input` and `output`.\"\"\"\n    self.input_display_name = STDIN_DISPLAY_NAME if self.input is None else self.input\n    self.output_display_name = STDOUT_DISPLAY_NAME if self.output is None else self.output\n</code></pre>"},{"location":"reference/#yamkix.get_default_yamkix_config","title":"get_default_yamkix_config","text":"<pre><code>get_default_yamkix_config() -&gt; YamkixConfig\n</code></pre> <p>Return <code>Yamkix</code> default configuration.</p> <p>Returns:</p> Name Type Description <code>yamkix_config</code> <code>YamkixConfig</code> <p>The default configuration provided by <code>Yamkix</code>:</p> <ul> <li>parsing_mode = rt</li> <li>explicit_start = True</li> <li>explicit_end = False</li> <li>default_flow_style = False</li> <li>dash_inwards = True</li> <li>quotes_preserved = True</li> <li>spaces_before_comment = None</li> <li>line_width = 2048</li> <li>io_config:         <ul> <li>input = None</li> <li>output = None</li> </ul> </li> </ul> Source code in <code>src/yamkix/config.py</code> <pre><code>def get_default_yamkix_config() -&gt; YamkixConfig:\n    \"\"\"Return `Yamkix` default configuration.\n\n    Returns:\n        yamkix_config: The default configuration provided by `Yamkix`:\n            &lt;ul&gt;\n                &lt;li&gt;&lt;i&gt;parsing_mode = rt&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;explicit_start = True&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;explicit_end = False&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;default_flow_style = False&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;dash_inwards = True&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;quotes_preserved = True&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;spaces_before_comment = None&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;line_width = 2048&lt;/i&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;i&gt;io_config&lt;/i&gt;:\n                    &lt;ul&gt;\n                        &lt;li&gt;&lt;i&gt;input = None&lt;/i&gt;&lt;/li&gt;\n                        &lt;li&gt;&lt;i&gt;output = None&lt;/i&gt;&lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n    \"\"\"\n    return YamkixConfig(\n        parsing_mode=\"rt\",\n        explicit_start=True,\n        explicit_end=False,\n        default_flow_style=False,\n        dash_inwards=True,\n        quotes_preserved=True,\n        spaces_before_comment=None,\n        line_width=DEFAULT_LINE_WIDTH,\n        version=False,\n        io_config=get_default_yamkix_input_output_config(),\n    )\n</code></pre>"},{"location":"reference/#yamkix.get_opinionated_yaml_writer","title":"get_opinionated_yaml_writer","text":"<pre><code>get_opinionated_yaml_writer(\n    yamkix_config: YamkixConfig,\n) -&gt; YAML\n</code></pre> <p>Configure a yaml parser/formatter the <code>yamkix</code> way.</p> <p>Parameters:</p> Name Type Description Default <code>yamkix_config</code> <code>YamkixConfig</code> <p>a YamkixConfig instance</p> required <p>Returns:     a ruamel.yaml YAML instance, configured according to the YamkixConfig you provided and: <ul> <li><code>mapping = 2</code> (map indent)</li> <li><code>sequence = 4</code> (sequence indent)</li> <li><code>offset = 2</code> (sequence dash offset)</li> </ul></p> Source code in <code>src/yamkix/yaml_writer.py</code> <pre><code>def get_opinionated_yaml_writer(\n    yamkix_config: YamkixConfig,\n) -&gt; YAML:\n    \"\"\"Configure a yaml parser/formatter the `yamkix` way.\n\n    Parameters:\n        yamkix_config: a YamkixConfig instance\n    Returns:\n        a ruamel.yaml YAML instance, configured according to the YamkixConfig you provided and:&lt;br/&gt;\n        &lt;ul&gt;\n            &lt;li&gt;`mapping = 2` (map indent)&lt;/li&gt;\n            &lt;li&gt;`sequence = 4` (sequence indent)&lt;/li&gt;\n            &lt;li&gt;`offset = 2` (sequence dash offset)&lt;/li&gt;\n        &lt;/ul&gt;\n    \"\"\"\n    yaml = YAML(typ=yamkix_config.parsing_mode)\n    yaml.explicit_start = yamkix_config.explicit_start\n    yaml.explicit_end = yamkix_config.explicit_end\n    yaml.default_flow_style = yamkix_config.default_flow_style\n    yaml.preserve_quotes = yamkix_config.quotes_preserved\n    yaml.width = yamkix_config.line_width\n    if yamkix_config.dash_inwards:\n        yaml.indent(\n            mapping=OPINIONATED_MAPPING_VALUE, sequence=OPINIONATED_SEQUENCE_VALUE, offset=OPINIONATED_OFFSET_VALUE\n        )\n    return yaml\n</code></pre>"},{"location":"reference/#yamkix.get_yamkix_config_from_default","title":"get_yamkix_config_from_default","text":"<pre><code>get_yamkix_config_from_default(\n    parsing_mode: str | None = None,\n    explicit_start: bool | None = None,\n    explicit_end: bool | None = None,\n    default_flow_style: bool | None = None,\n    dash_inwards: bool | None = None,\n    quotes_preserved: bool | None = None,\n    spaces_before_comment: int | None = None,\n    line_width: int | None = None,\n    io_config: YamkixInputOutputConfig | None = None,\n) -&gt; YamkixConfig\n</code></pre> <p>Return a <code>Yamkix</code> configuration, based on the default one.</p> <p>Parameters:</p> Name Type Description Default <code>parsing_mode</code> <code>str | None</code> <p><code>rt</code>/<code>None</code> -&gt; RoundTripLoader/RoundTripDumper, (default) <code>safe</code> -&gt; SafeLoader/SafeDumper, <code>unsafe</code> -&gt; normal/unsafe Loader/Dumper (pending deprecation) <code>full</code> -&gt; full Dumper only, including python built-ins that are     potentially unsafe to load <code>base</code> -&gt; baseloader     explicit_start: Whether to include explicit start markers (<code>---</code>).</p> <code>None</code> <code>explicit_end</code> <code>bool | None</code> <p>Whether to include explicit end markers (<code>...</code>).</p> <code>None</code> <code>default_flow_style</code> <code>bool | None</code> <p>Whether to use default flow style. Setting <code>default_flow_style = False</code> ensures that all collections are dumped in block style by default, which is the typical YAML format where sequences and mappings are presented with indentation and newlines. Conversely, setting <code>default_flow_style = True</code> forces all collections to be dumped in flow style, meaning they are written on a single line using square brackets [] for sequences and curly braces {} for mappings.</p> <code>None</code> <code>dash_inwards</code> <code>bool | None</code> <p>Whether to use dash inwards, i.e. whether to indent the dash in front of a sequence.</p> <code>None</code> <code>quotes_preserved</code> <code>bool | None</code> <p>Whether to preserve quotes, i.e. preserve the original quotes used in the input in the output.</p> <code>None</code> <code>spaces_before_comment</code> <code>int | None</code> <p>Number of spaces before comments.</p> <code>None</code> <code>line_width</code> <code>int | None</code> <p>Maximum line width.</p> <code>None</code> <code>io_config</code> <code>YamkixInputOutputConfig | None</code> <p>Input/Output configuration.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>yamkix_config</code> <code>YamkixConfig</code> <p>A <code>YamkixConfig</code> object with the specified overrides.</p> Tip <p>Use this function when you want to create a custom configuration that just overrides some of the default values.</p> Note <p>If you want to create a configuration from scratch, build a <code>YamkixConfig</code> object directly.</p> Source code in <code>src/yamkix/config.py</code> <pre><code>def get_yamkix_config_from_default(  # noqa: PLR0913\n    parsing_mode: str | None = None,\n    explicit_start: bool | None = None,\n    explicit_end: bool | None = None,\n    default_flow_style: bool | None = None,\n    dash_inwards: bool | None = None,\n    quotes_preserved: bool | None = None,\n    spaces_before_comment: int | None = None,\n    line_width: int | None = None,\n    io_config: YamkixInputOutputConfig | None = None,\n) -&gt; YamkixConfig:\n    \"\"\"Return a `Yamkix` configuration, based on the default one.\n\n    Parameters:\n        parsing_mode: `rt`/`None` -&gt; RoundTripLoader/RoundTripDumper, (default)\n            `safe` -&gt; SafeLoader/SafeDumper,\n            `unsafe` -&gt; normal/unsafe Loader/Dumper (pending deprecation)\n            `full` -&gt; full Dumper only, including python built-ins that are\n                potentially unsafe to load\n            `base` -&gt; baseloader\n                explicit_start: Whether to include explicit start markers (`---`).\n        explicit_end: Whether to include explicit end markers (`...`).\n        default_flow_style: Whether to use default flow style. Setting `default_flow_style = False` ensures\n            that all collections are dumped in block style by default, which is the typical YAML format where sequences\n            and mappings are presented with indentation and newlines. Conversely, setting `default_flow_style = True`\n            forces all collections to be dumped in flow style, meaning they are written on\n            a single line using square brackets [] for sequences and curly braces {} for mappings.\n        dash_inwards: Whether to use dash inwards, i.e. whether to indent the dash in front of a sequence.\n        quotes_preserved: Whether to preserve quotes, i.e. preserve the original quotes\n            used in the input in the output.\n        spaces_before_comment: Number of spaces before comments.\n        line_width: Maximum line width.\n        io_config: Input/Output configuration.\n\n    Returns:\n        yamkix_config: A `YamkixConfig` object with the specified overrides.\n\n    Tip:\n        Use this function when you want to create a custom configuration that just overrides\n        some of the default values.\n\n    Note:\n        If you want to create a configuration from scratch, build a `YamkixConfig` object directly.\n    \"\"\"\n    default_config = get_default_yamkix_config()\n    return YamkixConfig(\n        parsing_mode=parsing_mode if parsing_mode is not None else default_config.parsing_mode,\n        explicit_start=explicit_start if explicit_start is not None else default_config.explicit_start,\n        explicit_end=explicit_end if explicit_end is not None else default_config.explicit_end,\n        default_flow_style=default_flow_style if default_flow_style is not None else default_config.default_flow_style,\n        dash_inwards=dash_inwards if dash_inwards is not None else default_config.dash_inwards,\n        quotes_preserved=quotes_preserved if quotes_preserved is not None else default_config.quotes_preserved,\n        spaces_before_comment=spaces_before_comment\n        if spaces_before_comment is not None\n        else default_config.spaces_before_comment,\n        line_width=line_width if line_width is not None else default_config.line_width,\n        version=None,\n        io_config=io_config if io_config is not None else get_default_yamkix_input_output_config(),\n    )\n</code></pre>"},{"location":"reference/#yamkix.get_yamkix_version","title":"get_yamkix_version","text":"<pre><code>get_yamkix_version() -&gt; str\n</code></pre> <p>Get the current Yamkix version.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current Yamkix version.</p> Source code in <code>src/yamkix/helpers.py</code> <pre><code>def get_yamkix_version() -&gt; str:\n    \"\"\"Get the current Yamkix version.\n\n    Returns:\n        str: The current Yamkix version.\n    \"\"\"\n    return __version__\n</code></pre>"},{"location":"reference/#yamkix.yamkix_dump_all","title":"yamkix_dump_all","text":"<pre><code>yamkix_dump_all(\n    one_or_more_items: list,\n    yaml: YAML,\n    dash_inwards: bool,\n    output_file: str | None,\n    spaces_before_comment: int | None,\n) -&gt; None\n</code></pre> <p>Dump all the documents from the input structure.</p> Source code in <code>src/yamkix/yamkix.py</code> <pre><code>def yamkix_dump_all(\n    one_or_more_items: list, yaml: YAML, dash_inwards: bool, output_file: str | None, spaces_before_comment: int | None\n) -&gt; None:\n    \"\"\"Dump all the documents from the input structure.\"\"\"\n    # Clear the output file if it is a file and it exists\n    if output_file is not None and (output_file_path := Path(output_file)).is_file:  # Walrus baby\n        with output_file_path.open(mode=\"w\", encoding=\"UTF-8\") as _:\n            pass\n    for doc in one_or_more_items:\n        if output_file is None:\n            out = sys.stdout\n            yamkix_dump_one(doc, yaml, dash_inwards, out, spaces_before_comment)\n        else:\n            with Path(output_file).open(mode=\"a\", encoding=\"UTF-8\") as out:\n                yamkix_dump_one(doc, yaml, dash_inwards, out, spaces_before_comment)\n</code></pre>"},{"location":"reference/#yamkix.yamkix_dump_one","title":"yamkix_dump_one","text":"<pre><code>yamkix_dump_one(\n    single_item: dict,\n    yaml: YAML,\n    dash_inwards: bool,\n    out: TextIO,\n    spaces_before_comment: int | None,\n) -&gt; None\n</code></pre> <p>Dump a single document.</p> Source code in <code>src/yamkix/yamkix.py</code> <pre><code>def yamkix_dump_one(\n    single_item: dict, yaml: YAML, dash_inwards: bool, out: TextIO, spaces_before_comment: int | None\n) -&gt; None:\n    \"\"\"Dump a single document.\"\"\"\n    if spaces_before_comment is not None:\n        process_comments(single_item, column=spaces_before_comment)  # pyright: ignore[reportArgumentType]\n    if dash_inwards and type(single_item).__name__ == \"CommentedSeq\":\n        yaml.dump(single_item, out, transform=strip_leading_double_space)\n    else:\n        yaml.dump(single_item, out)\n</code></pre>"}]}